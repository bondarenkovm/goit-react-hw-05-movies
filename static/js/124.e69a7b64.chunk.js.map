{"version":3,"file":"static/js/124.e69a7b64.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx","services/fetchMoviesAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n`;\n\nexport const Item = styled.li`\n  width: calc((100% - 44px) / 4);\n  border: 1px solid #d1d1d1;\n  border-radius: 10px;\n  background-color: #f5f4fa;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n`;\nexport const Img = styled.img`\n  width: 100%;\n  height: 437px;\n  border-radius: 10px 10px 0px 0px;\n`;\nexport const Title = styled.p`\n  font-size: 16px;\n  font-weight: 500;\n  padding: 5px;\n`;\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: #000000;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { List, Item, Img, Title, MovieLink } from './MoviesList.styled';\n\nfunction MoviesList({ movies, link }) {\n  const location = useLocation();\n  // console.log(location);\n  return (\n    <List>\n      {movies.map(({ id, title, poster_path }) => {\n        return (\n          <Item key={id}>\n            <MovieLink to={`${link}${id}`} state={{ from: location }}>\n              <Img\n                loading=\"lazy\"\n                src={\n                  poster_path\n                    ? 'https://image.tmdb.org/t/p/w500' + poster_path\n                    : 'https://images.prom.ua/211029177_w640_h640_211029177.jpg'\n                }\n                alt={title}\n              />\n\n              <Title>{title}</Title>\n            </MovieLink>\n          </Item>\n        );\n      })}\n    </List>\n  );\n}\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n  link: PropTypes.string,\n};\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\nimport { Form as FormikForm, Field } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 400px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  border: 1px solid #d1d1d1;\n  border-radius: 5px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nexport const Button = styled.button`\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  border: 0;\n  background-color: #4fa94d;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const Input = styled(Field)`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { Formik } from 'formik';\nimport { toast } from 'react-hot-toast';\nimport PropTypes from 'prop-types';\nimport { FcSearch } from 'react-icons/fc';\nimport { Form, Button, Input } from './Searchbar.styled';\n\nconst Searchbar = ({ formSubmit }) => {\n  const handleSubmit = ({ moviesName }, { resetForm }) => {\n    if (moviesName === '') {\n      toast.error('Enter something!', {\n        style: {\n          background: '#ca1616',\n          color: '#fff',\n        },\n      });\n      formSubmit(moviesName);\n      resetForm();\n      return;\n    }\n    formSubmit(moviesName);\n    resetForm();\n  };\n\n  return (\n    <Formik initialValues={{ moviesName: '' }} onSubmit={handleSubmit}>\n      <Form>\n        <Button type=\"submit\">\n          <FcSearch style={{ width: 30, height: 30 }} />\n        </Button>\n        <Input\n          type=\"text\"\n          name=\"moviesName\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n      </Form>\n    </Formik>\n  );\n};\n\nSearchbar.propTypes = {\n  formSubmit: PropTypes.func.isRequired,\n};\n\nexport { Searchbar };\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Searchbar } from 'components/Searchbar';\nimport { fetchMoviesByName } from 'services/fetchMoviesAPI';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { toast } from 'react-hot-toast';\n\nfunction Movies() {\n  const [movies, setmovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('moviesName') ?? '';\n  useEffect(() => {\n    // const query = searchParams.get('moviesName');\n\n    async function fetch() {\n      try {\n        const filmsName = await fetchMoviesByName(query);\n\n        if (filmsName.length) {\n          setmovies([...filmsName]);\n        } else {\n          toast.error('No movies found!', {\n            style: {\n              background: '#ca1616',\n              color: '#fff',\n            },\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    if (query) {\n      fetch();\n    }\n  }, [query]);\n\n  function formSubmitHandler(moviesName) {\n    if (moviesName === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ moviesName });\n  }\n\n  return (\n    <div>\n      <Searchbar formSubmit={formSubmitHandler} />\n      <MoviesList movies={movies} link=\"\" />\n    </div>\n  );\n}\nexport default Movies;\n","import axios from 'axios';\nconst API_KEY = 'a6e9a41b359e3e0c31a6b9372b7a4849';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchMoviesTrending() {\n  const URL = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n  const response = await axios.get(URL);\n  return response.data.results;\n}\n\nexport async function fetchMoviesByName(query) {\n  const URL = `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`;\n  const response = await axios.get(URL);\n  return response.data.results;\n}\n\nexport async function fetchMovieById(id) {\n  const URL = `${BASE_URL}movie/${id}?api_key=${API_KEY}`;\n  const response = await axios.get(URL);\n  return response.data;\n}\nexport async function fetchMovieCast(id) {\n  const URL = `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`;\n  const response = await axios.get(URL);\n  return response.data.cast;\n}\n\nexport async function fetchMovieReviews(id) {\n  const URL = `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`;\n  const response = await axios.get(URL);\n  return response.data.results;\n}\n// export { fetchMoviesTrending, fetchMoviesByName };\n"],"names":["List","styled","Item","Img","Title","MovieLink","Link","movies","link","location","useLocation","map","id","title","poster_path","to","state","from","loading","src","alt","Form","FormikForm","Button","Input","Field","Searchbar","formSubmit","initialValues","moviesName","onSubmit","resetForm","toast","style","background","color","type","width","height","name","autoComplete","autoFocus","placeholder","useState","setmovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMoviesByName","filmsName","length","console","log","fetch","MoviesList","API_KEY","BASE_URL","fetchMoviesTrending","URL","axios","response","data","results","fetchMovieById","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}